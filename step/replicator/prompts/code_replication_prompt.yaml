# step/replicator/prompts/code_replication_prompt.yaml
code_replication_prompt:
  llm:
    model: "openai/gpt-4.1-mini"
    temperature: 0.6
    # max_tokens: 4096 # Consider uncommenting for very large files
    # top_p: 0.9

  generate_variants_prompt:
    - role: system
      content: |
        You are an expert C++ software engineer. Your task is to analyze a complete C++ source file with a known performance bottleneck, then generate several distinct, optimized versions of the entire file. The generated code must be a direct, compilable, drop-in replacement for the original file.

    - role: user
      content: |
        I need you to refactor the following C++ source file to fix an identified performance bottleneck.

        **Original C++ Source File:**
        ```cpp
        {source_code}
        ```

        **Bottleneck Analysis:**
        * **Location:** `{bottleneck_location}`
        * **Description:** `{bottleneck_type}`
        * **Hypothesis:** `{analysis_hypothesis}`

        **Your Task:**

        Adhere strictly to the following rules for your response:

        1.  **Start with a Fix Strategy:** Begin with the heading `## Proposed Fix Strategy` and provide a concise, one-paragraph summary of your approach based on the provided hypothesis.

        2.  **Generate 3 Complete Variants:** Create exactly three distinct C++ code variants.
            * Each variant must be a **complete and compilable source file** that can directly replace the original. Preserve all necessary components like `#include` directives, `namespace` declarations, `main()` function, classes, and helper functions.
            * Use the headings `### Variant 1`, `### Variant 2`, and `### Variant 3`.
            * Place the entire, self-contained code for each variant inside a `cpp` markdown block.
            * Before each code block, add a single C++ comment (`// Rationale: ...`) to briefly explain the logic of that specific variant.

        3.  **Minimize Unrelated Changes:** Only modify the code necessary to implement the performance fix. Preserve the original code's structure, formatting, and comments as much as possible to ensure a clean `diff`.

        Do not include any other text, introductions, or conclusions in your response.