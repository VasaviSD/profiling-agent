# step/replicator/prompts/code_replication_prompt.yaml
# Note: 'code_replication_prompt:' top-level key has been removed.
# 'llm:' and 'generate_variants_prompt:' are now top-level.

code_replication_prompt:
  llm:
    model: "openai/gpt-4.1-mini" 
    temperature: 0.6
    # Add other necessary LLM parameters here if needed, e.g.:
    # max_tokens: 4096 
    # top_p: 0.9

  generate_variants_prompt: # Name of the prompt section
    - role: system
      content: |
        You are an expert C++ software engineer specializing in code optimization and refactoring. 
        Your task is to analyze provided C++ source code, understand a specific performance 
        bottleneck (identified by an analysis tool), and then propose and generate multiple 
        distinct code modifications (variants) to address this bottleneck. 
        Each variant should aim to improve performance while maintaining correctness and 
        should be presented as a complete, compilable code snippet or modified function.

    - role: user
      content: |
        I have a C++ project with an identified performance bottleneck. Your goal is to refactor the code to alleviate this bottleneck.

        Original C++ Source Code (relevant parts or the full file, as appropriate):
        ```cpp
        {source_code}
        ```

        Identified Bottleneck Details:
        * Location: {bottleneck_location} 
        * Type/Nature: {bottleneck_type}
        * Analysis Hypothesis from Performance Analyzer: {analysis_hypothesis}

        Please perform the following:
        1.  Start your response with "Proposed Fix Strategy:" followed by a brief (1-2 paragraph) description of your overall strategy for addressing this bottleneck based on the hypothesis.
        2.  After the strategy, generate exactly 3 distinct C++ code variants that implement a fix.
            *   For each variant, use a heading like "### Variant 1", "### Variant 2", and "### Variant 3".
            *   Immediately following each heading, provide the complete modified C++ code (e.g., the full function or a significant, compilable block) within a C++ Markdown code block (```cpp ... ```).
            *   Ensure each variant is syntactically correct.
            *   Aim for diversity in the approaches for each variant if possible (e.g., algorithmic change, data structure optimization, loop restructuring, parallelization hints, use of different C++ features or library functions).
            *   Briefly explain the rationale behind each variant in a short comment before its code block if the change isn't obvious.

        Output ONLY the strategy and the 3 delineated variants with their code. Do not include any other introductory or concluding remarks. 